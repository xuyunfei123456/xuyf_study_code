{"remainingRequest":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\98751\\Desktop\\code\\后台管理系统\\src\\views\\product\\Spu\\SpuForm\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\src\\views\\product\\Spu\\SpuForm\\index.vue","mtime":1645102564616},{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\css-loader\\dist\\cjs.js","mtime":1643016934432},{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1643016936320},{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\postcss-loader\\src\\index.js","mtime":1643016934872},{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643016933534},{"path":"C:\\Users\\98751\\Desktop\\code\\后台管理系统\\node_modules\\vue-loader\\lib\\index.js","mtime":1643016935387}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZWwtdGFnICsgLmVsLXRhZyB7DQogIG1hcmdpbi1sZWZ0OiAxMHB4Ow0KfQ0KLmJ1dHRvbi1uZXctdGFnIHsNCiAgbWFyZ2luLWxlZnQ6IDEwcHg7DQogIGhlaWdodDogMzJweDsNCiAgbGluZS1oZWlnaHQ6IDMwcHg7DQogIHBhZGRpbmctdG9wOiAwOw0KICBwYWRkaW5nLWJvdHRvbTogMDsNCn0NCi5pbnB1dC1uZXctdGFnIHsNCiAgd2lkdGg6IDkwcHg7DQogIG1hcmdpbi1sZWZ0OiAxMHB4Ow0KICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/product/Spu/SpuForm","sourcesContent":["<template>\r\n  <div>\r\n    <el-form ref=\"form\" label-width=\"80px\" :model=\"spu\">\r\n      <el-form-item label=\"SPU名称\">\r\n        <el-input placeholder=\"SPU名称\" v-model=\"spu.spuName\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"品牌\">\r\n        <el-select placeholder=\"请选择品牌\" v-model=\"spu.tmId\">\r\n          <el-option\r\n            :label=\"tm.name\"\r\n            :value=\"tm.id\"\r\n            v-for=\"(tm, index) in tradeMarkList\"\r\n            :key=\"tm.id\"\r\n          ></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"SPU描述\">\r\n        <el-input\r\n          placeholder=\"描述\"\r\n          type=\"textarea\"\r\n          rows=\"4\"\r\n          v-model=\"spu.description\"\r\n        ></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"SPU图片\">\r\n        <!-- 上传图片 action图片上传的地址   list-type文件列表的类型 on-preview图片预览的时候会触发 on-remove当删除图片的时候会触发 file-list照片墙展示的数据，数据里的元素必须有name和url属性-->\r\n        <el-upload\r\n          action=\"https://jsonplaceholder.typicode.com/posts/\"\r\n          list-type=\"picture-card\"\r\n          :on-preview=\"handlePictureCardPreview\"\r\n          :on-remove=\"handleRemove\"\r\n          :on-success=\"handleSuccess\"\r\n          :file-list=\"spuImgList\"\r\n        >\r\n          <i class=\"el-icon-plus\"></i>\r\n        </el-upload>\r\n        <el-dialog :visible.sync=\"dialogVisible\">\r\n          <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\" />\r\n        </el-dialog>\r\n      </el-form-item>\r\n      <el-form-item label=\"销售属性\">\r\n        <el-select\r\n          :placeholder=\"`还有${unSelectSaleAttr.length}未选择`\"\r\n          v-model=\"attrId\"\r\n        >\r\n          <el-option\r\n            :label=\"unSelect.name\"\r\n            :value=\"`${unSelect.id}:${unSelect.name}`\"\r\n            v-for=\"(unSelect, index) in unSelectSaleAttr\"\r\n            :key=\"unSelect.id\"\r\n          ></el-option>\r\n        </el-select>\r\n        <el-button\r\n          type=\"primary\"\r\n          icon=\"el-icon-plus\"\r\n          :disabled=\"!attrId\"\r\n          @click=\"attSaleAttr\"\r\n          >添加销售属性</el-button\r\n        >\r\n        <!-- 展示的是当前spu属性自己的销售属性 -->\r\n        <el-table style=\"width: 100%\" border :data=\"spu.spuSaleAttrList\">\r\n          <el-table-column\r\n            align=\"center\"\r\n            type=\"index\"\r\n            label=\"序号\"\r\n            width=\"80\"\r\n          ></el-table-column>\r\n          <el-table-column\r\n            align=\"center\"\r\n            prop=\"saleAttrName\"\r\n            label=\"属性名\"\r\n            width=\"width\"\r\n          >\r\n          </el-table-column>\r\n          <el-table-column\r\n            align=\"center\"\r\n            prop=\"prop\"\r\n            label=\"属性值名称列表\"\r\n            width=\"width\"\r\n          >\r\n            <template slot-scope=\"{ row, $index }\">\r\n              <el-tag\r\n                :key=\"tag.id\"\r\n                v-for=\"(tag, index) in row.spuSaleAttrValueList\"\r\n                closable\r\n                :disable-transitions=\"false\"\r\n                @close=\"row.spuSaleAttrValueList.splice(index, 1)\"\r\n              >\r\n                {{ tag.saleAttrValueName }}\r\n              </el-tag>\r\n              <el-input\r\n                class=\"input-new-tag\"\r\n                v-if=\"row.inputVisible\"\r\n                v-model=\"row.inputValue\"\r\n                ref=\"saveTagInput\"\r\n                size=\"small\"\r\n                @keyup.enter.native=\"handleInputConfirm\"\r\n                @blur=\"handleInputConfirm(row)\"\r\n              >\r\n              </el-input>\r\n              <el-button\r\n                v-else\r\n                class=\"button-new-tag\"\r\n                size=\"small\"\r\n                @click=\"addSaleAttrValue(row)\"\r\n                >添加</el-button\r\n              >\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column\r\n            align=\"center\"\r\n            prop=\"prop\"\r\n            label=\"操作\"\r\n            width=\"width\"\r\n          >\r\n            <template slot-scope=\"{ row, $index }\">\r\n              <el-button\r\n                type=\"danger\"\r\n                icon=\"el-icon-delete\"\r\n                size=\"mini\"\r\n                @click=\"spu.spuSaleAttrList.splice($index, 1)\"\r\n              ></el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"addOrUpdateApu\">保存</el-button>\r\n        <el-button type=\"primary\" @click=\"cancel\">取消</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      dialogImageUrl: \"\",\r\n      dialogVisible: false,\r\n      //spu属性初始化的时候是一个空对象，在修改spu的时候，会向服务器发请求，返回spu信息，在修改的时候可以利用服务器返回的这个对象收集最新的数据提交给服务器\r\n      //添加spu没如果是添加spu的时候并没有向服务器发请求\r\n      spu: {\r\n        category3Id: 0, //三级分类的ID\r\n        tmId: 0, //平台id\r\n        description: \"\", //描述\r\n        spuImageList: [\r\n          //收集spu图片的信息\r\n          {\r\n            id: 0,\r\n            imgName: \"\",\r\n            imgUrl: \"\",\r\n            spuId: 0,\r\n          },\r\n        ],\r\n        spuName: \"\", //spu名称\r\n        spuSaleAttrList: [\r\n          //平台属性与属性值的收集\r\n          {\r\n            baseSaleAttrId: 0,\r\n            id: 0,\r\n            saleAttrName: \"\",\r\n            spuId: 0,\r\n            spuSaleAttrValueList: [\r\n              {\r\n                baseSaleAttrId: 0,\r\n                id: 0,\r\n                isChecked: \"\",\r\n                saleAttrName: \"\",\r\n                saleAttrValueName: \"\",\r\n                spuId: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      }, //存储spu信息属性\r\n      tradeMarkList: [], //存储品牌信息\r\n      spuImgList: [], //存储spu图片的数据\r\n      saleAttrList: [], //销售属性的数据\r\n      attrId: \"\", //收集未选择的销售属性的ID\r\n    };\r\n  },\r\n  computed: {\r\n    //计算出还未选择的销售属性\r\n    unSelectSaleAttr() {\r\n      return this.saleAttrList.filter((item) => {\r\n        return this.spu.spuSaleAttrList.every((item1) => {\r\n          return item.name != item1.saleAttrName;\r\n        });\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    handleRemove(file, fileList) {\r\n      this.spuImgList = fileList;\r\n    },\r\n    handlePictureCardPreview(file) {\r\n      this.dialogImageUrl = file.url;\r\n      this.dialogVisible = true;\r\n    },\r\n    //照片墙图片上传成功的回调\r\n    handleSuccess(response, file, fileList) {\r\n      this.spuImgList = fileList;\r\n    },\r\n    //初始化spuForm数据\r\n    async initSpuData(spu) {\r\n      let spuResult = await this.$API.spu.reqSpu(spu.id);\r\n      if (spuResult.code == 200) {\r\n        this.spu = spuResult.data;\r\n      }\r\n      //获取品牌信息\r\n      let tradeMarkResult = await this.$API.spu.reqTradeMarkList();\r\n      if (tradeMarkResult.code == 200) {\r\n        this.tradeMarkList = tradeMarkResult.data;\r\n      }\r\n      //获取spu图片的数据\r\n      let spuImgResult = await this.$API.spu.reqSpuImageList(spu.id);\r\n      if (spuImgResult.code == 200) {\r\n        let lsitAttr = spuImgResult.data;\r\n        //由于照片墙显示图片的数据需要数组，数组里面的元素需要有name和url字段\r\n        //需要把服务器返回的数据进行修改\r\n        lsitAttr.forEach((item) => {\r\n          item.name = item.imgName;\r\n          item.url = item.imgUrl;\r\n        });\r\n        this.spuImgList = lsitAttr;\r\n      }\r\n      //获取平台全部的销售属性\r\n      let saleResult = await this.$API.spu.reqBaseSaleAttrList();\r\n      if (saleResult.code == 200) {\r\n        this.saleAttrList = saleResult.data;\r\n      }\r\n    },\r\n    //添加新的销售属性\r\n    attSaleAttr() {\r\n      //已经收集需要添加的销售属性的信息   把收集到的销售属性数据进行分割\r\n      const [baseSaleAttrId, saleAttrName] = this.attrId.split(\":\");\r\n      //向spu对象的spuSaleAttrList属性里面添加新的销售属性\r\n      let newSaleAttr = {\r\n        baseSaleAttrId,\r\n        saleAttrName,\r\n        spuSaleAttrValueList: [],\r\n      };\r\n      this.spu.spuSaleAttrList.push(newSaleAttr);\r\n      this.attrId = \"\";\r\n    },\r\n    //添加按钮的回调\r\n    addSaleAttrValue(row) {\r\n      this.$set(row, \"inputVisible\", true);\r\n      this.$set(row, \"inputValue\", \"\");\r\n    },\r\n    //失去焦点事件\r\n    handleInputConfirm(row) {\r\n      const { baseSaleAttrId, inputValue } = row;\r\n      if (inputValue.trim() == \"\") {\r\n        this.$message(\"属性值不能为空\");\r\n        return;\r\n      }\r\n      //属性值不能重复\r\n      let res = row.spuSaleAttrValueList.every(\r\n        (item) => item.saleAttrValueName != inputValue\r\n      );\r\n      if (!res) {\r\n        return;\r\n      }\r\n      //新增的销售属性值\r\n      let newSaleAttrValue = { baseSaleAttrId, saleAttrValueName: inputValue };\r\n      row.spuSaleAttrValueList.push(newSaleAttrValue);\r\n      row.inputVisible = false;\r\n    },\r\n    //保存按钮的回调\r\n    async addOrUpdateApu() {\r\n      //整理参数:需要整理照片墙的数据\r\n      //携带参数：对于图片，需要携带imgName与imgUrl字段\r\n      this.spu.spuImageList = this.spuImgList.map((item) => {\r\n        return {\r\n          imgName: item.name,\r\n          imgUrl: (item.response && item.response.data) || item.url,\r\n        };\r\n      });\r\n      //发请求\r\n      let res = await this.$API.spu.reqAddOrUpdateSpu(this.spu);\r\n      if (res.code == 200) {\r\n        //提示\r\n        this.$message({ type: \"success\", message: \"保存成功\" });\r\n        //通知父组件回到场景0\r\n        this.$emit(\"changeScene\", {\r\n          scene: 0,\r\n          flag: this.spu.id ? \"修改\" : \"添加\",\r\n        });\r\n      }\r\n      Object.assign(this._data, this.$options.data());\r\n    },\r\n    //点击添加spu按钮的时候，发请求的函数\r\n    async addSpuData(category3Id) {\r\n      //添加spu的时候收集三级分类的id\r\n      this.spu.category3Id = category3Id;\r\n      //获取品牌信息\r\n      let tradeMarkResult = await this.$API.spu.reqTradeMarkList();\r\n      if (tradeMarkResult.code == 200) {\r\n        this.tradeMarkList = tradeMarkResult.data;\r\n      }\r\n      //获取平台全部的销售属性\r\n      let saleResult = await this.$API.spu.reqBaseSaleAttrList();\r\n      if (saleResult.code == 200) {\r\n        this.saleAttrList = saleResult.data;\r\n      }\r\n    },\r\n    //取消按钮\r\n    cancel() {\r\n      //取消按钮的回调，通知父亲切换场景为0\r\n      this.$emit(\"changeScene\", { scene: 0, flag: \"\" });\r\n      //清理数据\r\n      //组件实例this._data，可以操作data当中响应式数据\r\n      // this.$options可以获取配置对象，配置对象的data函数执行，返回的响应式数据为空的\r\n      Object.assign(this._data, this.$options.data());\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.el-tag + .el-tag {\r\n  margin-left: 10px;\r\n}\r\n.button-new-tag {\r\n  margin-left: 10px;\r\n  height: 32px;\r\n  line-height: 30px;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n}\r\n.input-new-tag {\r\n  width: 90px;\r\n  margin-left: 10px;\r\n  vertical-align: bottom;\r\n}\r\n</style>"]}]}
{"remainingRequest":"C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\src\\store\\home\\index.js","dependencies":[{"path":"C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\src\\store\\home\\index.js","mtime":1639304657696},{"path":"C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\babel.config.js","mtime":1642672032543},{"path":"C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638364636780},{"path":"C:\\Users\\98751\\Desktop\\code\\projec-SPH\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1638364638144}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcOTg3NTFcXERlc2t0b3BcXGNvZGVcXHByb2plYy1TUEhcXGFwcFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgcmVxQ2F0ZWdvcnlMaXN0LCByZXFHZXRCYW5uZXJMaXN0LCByZXFGbG9vckxpc3QgfSBmcm9tICJAL2FwaSI7IC8vIGhvbWXmqKHlnZfnmoTlsI/ku5PlupMKCnZhciBzdGF0ZSA9IHsKICAvL3N0YXRl5Lit55qE5pWw5o2u6buY6K6k5Yid5aeL5YC85LiN6KaB556O5YaZ77yM5pyN5Yqh5Zmo6L+U5Zue5a+56LGh77yM5pyN5Yqh5Zmo6L+U5Zue5pWw57uE44CC44CQ5qC55o2u5o6l5Y+j6L+U5Zue5YC85Yid5aeL5YyW44CRCiAgY2F0ZWdvcnlMaXN0OiBbXSwKICAvL+i9ruaSreWbvueahOaVsOe7hAogIGJhbm5lckxpc3Q6IFtdLAogIC8vIGZsb29y57uE5Lu255qE5pWw5o2uCiAgZmxvb3JMaXN0OiBbXQp9Owp2YXIgbXV0YXRpb25zID0gewogIENBVEVHT1JZTElTVDogZnVuY3Rpb24gQ0FURUdPUllMSVNUKHN0YXRlLCBjYXRlZ29yeUxpc3QpIHsKICAgIHN0YXRlLmNhdGVnb3J5TGlzdCA9IGNhdGVnb3J5TGlzdDsKICB9LAogIEdFVEJBTk5FUkxJU1Q6IGZ1bmN0aW9uIEdFVEJBTk5FUkxJU1Qoc3RhdGUsIGJhbm5lckxpc3QpIHsKICAgIHN0YXRlLmJhbm5lckxpc3QgPSBiYW5uZXJMaXN0OwogIH0sCiAgR0VURkxPT1JMSVNUOiBmdW5jdGlvbiBHRVRGTE9PUkxJU1Qoc3RhdGUsIGZsb29yTGlzdCkgewogICAgc3RhdGUuZmxvb3JMaXN0ID0gZmxvb3JMaXN0OwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgLy/pgJrov4dBUEnph4zpnaLnmoTmjqXlj6Plh73mlbDosIPnlKjvvIzlkJHmnI3liqHlmajlj5Hor7fmsYLvvIzojrflj5bmnI3liqHlmajnmoTmlbDmja4KICBnZXRDYXRlZ29yeUxpc3Q6IGZ1bmN0aW9uIGdldENhdGVnb3J5TGlzdChfcmVmKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgY29tbWl0LCByZXN1bHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gcmVxQ2F0ZWdvcnlMaXN0KCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jb2RlID09IDIwMCkgewogICAgICAgICAgICAgICAgY29tbWl0KCdDQVRFR09SWUxJU1QnLCByZXN1bHQuZGF0YSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgLy/ojrflj5bpppbpobXova7mkq3lm77nmoTmlbDnu4QKICBnZXRCYW5uZXJMaXN0OiBmdW5jdGlvbiBnZXRCYW5uZXJMaXN0KF9yZWYyKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzdWx0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlcUdldEJhbm5lckxpc3QoKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jb2RlID09IDIwMCkgewogICAgICAgICAgICAgICAgY29tbWl0KCdHRVRCQU5ORVJMSVNUJywgcmVzdWx0LmRhdGEpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0sCiAgLy/ojrflj5ZmbG9vcuaVsOaNrgogIGdldEZsb29yTGlzdDogZnVuY3Rpb24gZ2V0Rmxvb3JMaXN0KF9yZWYzKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzdWx0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlcUZsb29yTGlzdCgpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICBpZiAocmVzdWx0LmNvZGUgPT0gMjAwKSB7CiAgICAgICAgICAgICAgICBjb21taXQoJ0dFVEZMT09STElTVCcsIHJlc3VsdC5kYXRhKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMyk7CiAgICB9KSkoKTsKICB9Cn07CnZhciBnZXR0ZXJzID0ge307CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBnZXR0ZXJzOiBnZXR0ZXJzCn07"},{"version":3,"sources":["C:/Users/98751/Desktop/code/projec-SPH/app/src/store/home/index.js"],"names":["reqCategoryList","reqGetBannerList","reqFloorList","state","categoryList","bannerList","floorList","mutations","CATEGORYLIST","GETBANNERLIST","GETFLOORLIST","actions","getCategoryList","commit","result","code","data","getBannerList","getFloorList","getters"],"mappings":";;AAAA,SACIA,eADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,OAJP,C,CAKA;;AACA,IAAMC,KAAK,GAAG;AACV;AACAC,EAAAA,YAAY,EAAE,EAFJ;AAGV;AACAC,EAAAA,UAAU,EAAE,EAJF;AAKV;AACAC,EAAAA,SAAS,EAAE;AAND,CAAd;AAQA,IAAMC,SAAS,GAAG;AACdC,EAAAA,YADc,wBACDL,KADC,EACMC,YADN,EACoB;AAC9BD,IAAAA,KAAK,CAACC,YAAN,GAAqBA,YAArB;AACH,GAHa;AAIdK,EAAAA,aAJc,yBAIAN,KAJA,EAIOE,UAJP,EAImB;AAC7BF,IAAAA,KAAK,CAACE,UAAN,GAAmBA,UAAnB;AACH,GANa;AAOdK,EAAAA,YAPc,wBAODP,KAPC,EAOMG,SAPN,EAOiB;AAC3BH,IAAAA,KAAK,CAACG,SAAN,GAAkBA,SAAlB;AACH;AATa,CAAlB;AAWA,IAAMK,OAAO,GAAG;AACZ;AACMC,EAAAA,eAFM,iCAIT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADCC,cAAAA,MACD,QADCA,MACD;AAAA;AAAA,qBACoBb,eAAe,EADnC;;AAAA;AACKc,cAAAA,MADL;;AAEC,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,cAAD,EAAiBC,MAAM,CAACE,IAAxB,CAAN;AACH;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF,GATW;AAUZ;AACMC,EAAAA,aAXM,gCAaT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADCJ,cAAAA,MACD,SADCA,MACD;AAAA;AAAA,qBACoBZ,gBAAgB,EADpC;;AAAA;AACKa,cAAAA,MADL;;AAEC,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,eAAD,EAAkBC,MAAM,CAACE,IAAzB,CAAN;AACH;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF,GAlBW;AAmBZ;AACME,EAAAA,YApBM,+BAsBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADCL,cAAAA,MACD,SADCA,MACD;AAAA;AAAA,qBACoBX,YAAY,EADhC;;AAAA;AACKY,cAAAA,MADL;;AAEC,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,cAAD,EAAiBC,MAAM,CAACE,IAAxB,CAAN;AACH;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF;AA3BW,CAAhB;AA6BA,IAAMG,OAAO,GAAG,EAAhB;AACA,eAAe;AACXhB,EAAAA,KAAK,EAALA,KADW;AAEXI,EAAAA,SAAS,EAATA,SAFW;AAGXI,EAAAA,OAAO,EAAPA,OAHW;AAIXQ,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import {\r\n    reqCategoryList,\r\n    reqGetBannerList,\r\n    reqFloorList\r\n} from \"@/api\"\r\n// home模块的小仓库\r\nconst state = {\r\n    //state中的数据默认初始值不要瞎写，服务器返回对象，服务器返回数组。【根据接口返回值初始化】\r\n    categoryList: [],\r\n    //轮播图的数组\r\n    bannerList: [],\r\n    // floor组件的数据\r\n    floorList: []\r\n}\r\nconst mutations = {\r\n    CATEGORYLIST(state, categoryList) {\r\n        state.categoryList = categoryList\r\n    },\r\n    GETBANNERLIST(state, bannerList) {\r\n        state.bannerList = bannerList\r\n    },\r\n    GETFLOORLIST(state, floorList) {\r\n        state.floorList = floorList\r\n    }\r\n}\r\nconst actions = {\r\n    //通过API里面的接口函数调用，向服务器发请求，获取服务器的数据\r\n    async getCategoryList({\r\n        commit\r\n    }) {\r\n        let result = await reqCategoryList()\r\n        if (result.code == 200) {\r\n            commit('CATEGORYLIST', result.data)\r\n        }\r\n    },\r\n    //获取首页轮播图的数组\r\n    async getBannerList({\r\n        commit\r\n    }) {\r\n        let result = await reqGetBannerList();\r\n        if (result.code == 200) {\r\n            commit('GETBANNERLIST', result.data)\r\n        }\r\n    },\r\n    //获取floor数据\r\n    async getFloorList({\r\n        commit\r\n    }) {\r\n        let result = await reqFloorList();\r\n        if (result.code == 200) {\r\n            commit('GETFLOORLIST', result.data)\r\n        }\r\n    }\r\n}\r\nconst getters = {}\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"]}]}